-- Content of the RAM memory
DEPTH = 32; -- Depth of memory: 5-bit address
WIDTH = 8; -- Width of memory: 8-bit data
ADDRESS_RADIX = BIN; -- All values in binary (HEX, DEC, OCT, BIN)
DATA_RADIX = BIN;
-- Specify memory content.
CONTENT
BEGIN
[00000..11111] : 00000000; -- Initialize locations range 00-FF to 0000
-- Format of each memory location is
-- address : data
-- Opcodes for the Little Computer 2
-- 000 = load A,mmmmm
-- 001 = store A,mmmmm
-- 010 = add A,mmmmm
-- 011 = sub A,mmmmm
-- 100 = in A
-- 101 = jz mmmmm
-- 110 = jpos mmmmm
-- 111 = halt
--------------------------------------------------------
-- There are three programs listed below: GCD, Sum, and Count
-- Only the progam listed last is ran.
-- To try out a different program, move the code for the program you
-- want to the end of the list, re-compile, and download to the FPGA
--------------------------------------------------------
--Rezultatul calculului (A*C+B) *C; A=3, B=3; C=3 este divizibil cu 4?
00000 : 00000000;       -- Locație de memorie folosită pentru calcule, printre care stocarea rezultatului final, inițializată cu 0. Ne vom referi la ea ca D.
00001 : 00000001;       -- Locație de memorie folosită pentru stocarea decrementului, inițializată cu 1.
00010 : 00000011;       -- Locație de memorie folosită pentru stocarea variabilei A=3 .
00011 : 00000011;       -- Locație de memorie folosită pentru stocarea variabilei B=3.
00100 : 00000011;       -- Locație de memorie folosită pentru stocarea variabilei C=3.
-- Operația X=A*C=3*3=9
00101 : 10101101;       -- Daca valoarea din acumulator este 0, terminăm bucla. Valoarea comparată este valoarea de la locația lui C pentru că C este folosit ca counter.
00110 : 00000010;       -- Încărcăm locația variabilei A=3
00111 : 01000000;       -- Adunăm A=3 la locația variabilei D
01000 : 00100000;       -- Stocăm rezultatul la locația variabilei D.
01001 : 00000100;       -- Încărcăm locația variabilei C.
01010 : 01100001;       -- Decrementăm C (C-1)
01011 : 00100100;       -- Stocăm C-1 în locația lui C
01100 : 11000101;       -- Dacă valoarea din acumulator este pozitivă (>=0), reluăm bucla
-- Operația Y=X+B=9+3=12 unde X=A*C=3*3=9
01101 : 00000000;       -- Încărcăm în acumulator locația variabilei D (valoarea 9 după terminarea buclei pentru înmulțire)
01110 : 01000011;       -- Adunăm B (9+3=12)
01111 : 00100000;       -- Stocăm rezultatul în locația lui D
-- Operația Y*C=12*3 unde Y=A*C+B
10000 : 00000011;       -- Încărcăm locația variabilei B
10001 : 10111001;       -- Daca valoarea din acumulator este 0, terminăm bucla. Valoarea comparată este valoarea de la locația lui B pentru că B este folosit ca counter.
10010 : 00000000;       -- Încărcăm locația variabilei D=12
10011 : 01000100;       -- Adunăm D=12 la locația variabilei C care initial este 0.
10100 : 00100100;       -- Stocăm rezultatul la locația variabilei C.
10101 : 00000011;       -- Încărcăm locația variabilei B.
10110 : 01100001;       -- Decrementăm B (B-1)
10111 : 00100011;       -- Stocăm B-1 în locația lui B
11000 : 11010001;       -- Dacă valoarea din acumulator este pozitivă (>=0), reluăm bucla
--În acest punct avem stocate diverse valori la cele 4 locații de memorie: A = 3, B = 0, C = 36, D = 12
--Verificarea divizibilității cu 4. Dacă numărul e divizibil cu 4, ultima valoare din acumulator va fi 0. Dacă nu e divizibil cu 4, va fi 1.
11001 : 00000100;       -- Încărcăm locația variabilei C=36, rezultatul final al calculului (A*C+B)*C=(3*3+3)*3=36
11010 : 00000100;       -- Folosim o nouă locație de memorie pentru verificarea divizibilității E=4
11011 : 01111010;       -- C-E=C-4
11100 : 10111111;       -- Dacă C-E=C-4 e 0, sărim la halt și afișăm ultima valoare din acumulator 0 (divizibil cu 4)
11101 : 11011011;       -- Dacă C-E=C-4 e pozitiv (>=0), reluăm bucla și continuăm să scădem 4 din C.
11110 : 00000001;       -- Încărcăm 1 in acumulator (nu e divizibil cu 4)
11111 : 11111111;       -- halt
END;



	 
	
	




